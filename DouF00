#!/usr/bin/env python

import wx
import os
import sys
import pdb
import numpy

title = "DouF00"
numberFontSize = 150

try:
    basedir = sys.argv[1]
except IndexError:
    basedir = os.getcwd()
    print "No basedir specified, using current directory.."

try:
    os.chdir(basedir)
except OSError:
    print "No such file or directory"
    sys.exit(1)

basedir = os.getcwd()

pictures = []
files = os.listdir(basedir)
for file in files:
    try:
        if (file[-4:].lower() == ".jpg") or (file[-5:].lower() == ".jpeg"):
            pictures.append(file)
    except IndexError:
        pass

pictures.sort()
print "\n".join(pictures)

def loadImage(filename, size):
    try:
        if filename == "":
            array = numpy.zeros((size[1], size[0], 3), 'uint8')
            image = wx.EmptyImage(size[0], size[1])
            image.SetData(array.tostring())
            bitmap = wx.BitmapFromImage(image)
        else:
            f = open(filename, "rb")
            image = wx.ImageFromStream(f)
            f.close()
            ImageSize = image.GetSize()
            if (size[0] < ImageSize[0]) or (size[1] < ImageSize[1]):
                ratioX = float(size[0]) / ImageSize[0]
                ratioY = float(size[1]) / ImageSize[1]
                if ratioX < ratioY:
                    ImageSize[0] = int(ImageSize[0] * ratioX)
                    ImageSize[1] = int(ImageSize[1] * ratioX)
                else:
                    ImageSize[0] = int(ImageSize[0] * ratioY)
                    ImageSize[1] = int(ImageSize[1] * ratioY)
                
                image.Rescale(ImageSize[0], ImageSize[1])

            print ImageSize

            bitmap = wx.BitmapFromImage(image)
        return bitmap
    #except:
    #    print "Cant load image"
    finally:
        pass

class PresentationScreen(wx.Frame):
    def __init__(self, displayindex = 0):
        geometry = wx.Display(displayindex).GetGeometry()
        position = (geometry[0], geometry[1])
        self.size = (geometry[2], geometry[3])
        style = wx.NO_BORDER | wx.STAY_ON_TOP
        super(PresentationScreen, self).__init__(None, wx.ID_ANY, title, style = style, pos = position, size = self.size)
        self.box = wx.BoxSizer(wx.VERTICAL)
        self.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.static_bitmap = wx.StaticBitmap(self, wx.ID_ANY)
        self.box.Add(self.static_bitmap, 0, wx.ALIGN_CENTER_HORIZONTAL)
        self.SetSizer(self.box)
    def load(self, filename):
        bitmap = loadImage(filename, self.size)
        self.static_bitmap.SetBitmap(bitmap)

class PresentorsScreen(wx.Frame):
    def __init__(self, displayindex = 0):
        geometry = wx.Display(displayindex).GetGeometry()
        position = (geometry[0], geometry[1])
        self.size = (geometry[2], geometry[3])
        style = wx.NO_BORDER | wx.STAY_ON_TOP
        super(PresentorsScreen, self).__init__(None, wx.ID_ANY, title, style = style, size = self.size, pos = position)
        self.SetBackgroundColour(wx.Colour(127, 127, 127))
        self.static_bitmap1 = wx.StaticBitmap(self, wx.ID_ANY)
        self.static_bitmap2 = wx.StaticBitmap(self, wx.ID_ANY)
        self.hbox = wx.BoxSizer(wx.HORIZONTAL)
        self.hbox.Add(self.static_bitmap1, 99, wx.ALIGN_CENTER_VERTICAL)
        self.hbox.AddStretchSpacer(2)
        self.hbox.Add(self.static_bitmap2, 99, wx.ALIGN_CENTER_VERTICAL)
        self.box = wx.BoxSizer(wx.VERTICAL)
        self.box.Add(self.hbox, 179, wx.ALIGN_CENTER_HORIZONTAL)
        self.box.AddStretchSpacer(2)
        font = wx.Font(30, wx.DEFAULT, wx.NORMAL, wx.BOLD)
        self.clock = wx.StaticText(self, wx.ID_ANY, "13:37")
        self.clock.SetFont(font)
        self.box.Add(self.clock , 19, wx.ALIGN_CENTER_HORIZONTAL)
        self.SetSizer(self.box)
    def load(self, filename1, filename2):
        width = int(float(self.size[0]) / 200 * 99)
        height = int(float(self.size[1]) / 200 * 179)
        print width, height
        print self.size
        bitmap1 = loadImage(filename1, (width, height))
        bitmap2 = loadImage(filename2, (width, height))
        self.static_bitmap1.SetBitmap(bitmap1)
        self.static_bitmap2.SetBitmap(bitmap2)

class NumberFrame(wx.Frame):
    def __init__(self, displayindex):
        geometry = wx.Display(displayindex).GetGeometry()
        style = wx.NO_BORDER | wx.STAY_ON_TOP | wx.FRAME_TOOL_WINDOW
        super(NumberFrame, self).__init__(None, wx.ID_ANY, title, style = style)
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        box = wx.BoxSizer(wx.VERTICAL)
        font = wx.Font(numberFontSize, wx.DEFAULT, wx.NORMAL, wx.BOLD)
        text = wx.StaticText(self, wx.ID_ANY, str(displayindex))
        text.SetFont(font)
        box.Add(text, 0, wx.ALIGN_CENTER)
        self.SetSizerAndFit(box)
        size = self.GetSize()
        position = (geometry[0] + (geometry[2] / 2) - (size[0] / 2),
                    geometry[1] + (geometry[3] / 2) - (size[1] / 2))
        self.SetPosition(position)
        self.Show()

class DisplayChoice(wx.Frame):
    def __init__(self):
        style = wx.DEFAULT_FRAME_STYLE | wx.STAY_ON_TOP
        super(DisplayChoice, self).__init__(None, wx.ID_ANY, title, style = style)
        self.choices = ["-- Nothing --", "Presentation Screen", "Presentors Screen"]
        displays = wx.Display.GetCount()
        box = wx.BoxSizer(wx.VERTICAL)
        self.selections = []
        for d in range(displays):
            choice = wx.Choice(self, wx.ID_ANY, choices = self.choices)
            choice.SetSelection(0)
            self.selections.append(choice)
            hbox = wx.BoxSizer(wx.HORIZONTAL)
            hbox.Add(wx.StaticText(self, wx.ID_ANY, "Display " + str(d) + ": "), 0, wx.ALIGN_CENTER_VERTICAL)
            hbox.Add(choice, 0, wx.ALIGN_CENTER_VERTICAL)
            box.Add(hbox, 0, wx.ALIGN_CENTER_HORIZONTAL)

        self.button = wx.Button(self, wx.ID_ANY, label = "OK")
        box.Add(self.button, 1, wx.ALIGN_CENTER_HORIZONTAL)

        self.SetSizerAndFit(box)
        self.Show()

class MyApp(wx.App):
    def OnInit(self):
        displayCount = wx.Display.GetCount()
        self.numberFrames = []
        for d in range(displayCount):
            print wx.Display(d).GetGeometry()
            self.numberFrames.append(NumberFrame(d))
        self.choice = DisplayChoice()
        self.choice.button.Bind(wx.EVT_BUTTON, self.Run)
            
        #Beamer = PresentationScreen()
        #Beamer.load("test.jpeg")
        #Beamer.Display()
        #Presentor = PresentorsScreen()
        #Presentor.panel.Bind(wx.EVT_KEY_UP, self.OnKeyPress)
        return True

    def OnKeyPress(self, event):
        pdb.set_trace()
        event.Skip()
        key = event.GetKeyCode()
        if key == ord("f"):
            Beamer.Maximize()

    def LoadImage(self, filename):
        pass

    def Run(self, event):
        displayCount = wx.Display.GetCount()
        self.presentationScreens = []
        self.presentorsScreens = []
        for displayindex in range(displayCount):
            if self.choice.choices[self.choice.selections[displayindex].GetSelection()] == "Presentation Screen":
                self.presentationScreens.append(PresentationScreen(displayindex = displayindex))
            elif self.choice.choices[self.choice.selections[displayindex].GetSelection()] == "Presentors Screen":
                self.presentorsScreens.append(PresentorsScreen(displayindex = displayindex))
        self.choice.Destroy()
        for numberFrame in self.numberFrames:
            numberFrame.Destroy()
        for p in self.presentationScreens:
            p.load("test.jpeg")
            p.Show()
        for p in self.presentorsScreens:
            p.load("test.jpeg", "test.jpeg")
            p.Show()


def main():
    app = MyApp()
    app.MainLoop()

if __name__ == "__main__": main()

# vim:nnoremap <silent> <F5> :!./presentation: #
