#!/usr/bin/env python

import wx
import os
import sys
import pdb

title = "DouF00"
numberFontSize = 150

try:
    basedir = sys.argv[1]
except IndexError:
    basedir = os.getcwd()
    print "No basedir specified, using current directory.."

try:
    os.chdir(basedir)
except OSError:
    print "No such file or directory"
    sys.exit(1)

basedir = os.getcwd()

pictures = []
files = os.listdir(basedir)
for file in files:
    try:
        if (file[-4:].lower() == ".jpg") or (file[-5:].lower() == ".jpeg"):
            pictures.append(file)
    except IndexError:
        pass

pictures.sort()
print "\n".join(pictures)

class PresentationScreen(wx.Frame):
    def __init__(self):
        style = wx.NO_BORDER | wx.STAY_ON_TOP
        super(PresentationScreen, self).__init__(None, wx.ID_ANY, title, style = style)
        self.box = wx.BoxSizer(wx.VERTICAL)
        self.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.static_bitmap = wx.StaticBitmap(self, wx.ID_ANY)
    def load(self, filename):
        self.filename = filename
        try:
            self.f = open(self.filename, "rb")
            self.image = wx.ImageFromStream(self.f)
            ImageSize = self.image.GetSize()
            DisplaySize = wx.DisplaySize()
            if (DisplaySize[0] < ImageSize[0]) or (DisplaySize[1] < ImageSize[1]):
                if (float(DisplaySize[0]) / ImageSize[0]) < (float(DisplaySize[1]) / ImageSize[1]):
                    ImageSize[0] = DisplaySize[0]
                    ImageSize[1] = ImageSize[1] * (DisplaySize[0] / ImageSize[0])
                else:
                    ImageSize[0] = ImageSize[0] * (DisplaySize[1] / ImageSize[1])
                    ImageSize[1] = DisplaySize[1]
                
                self.image.Rescale(ImageSize[0], ImageSize[1])

            self.bitmap = wx.BitmapFromImage(self.image)
            self.static_bitmap.SetBitmap(self.bitmap)
            self.f.close()
        except:
            print "Cant load image"

        self.box.Add(self.static_bitmap, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.SHAPED)
        self.SetSizerAndFit(self.box)
    def display(self):
        self.Show()
    def Maximize(self):
        self.ShowFullScreen(True)
        self.Layout()

class PresentorsScreen(wx.Frame):
    def __init__(self):
        style = wx.NO_BORDER | wx.STAY_ON_TOP
        super(PresentorsScreen, self).__init__(None, wx.ID_ANY, title, style = style, size = (320, 240))
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        self.panel = wx.Panel(self, wx.ID_ANY)
        self.Show()

class NumberFrame(wx.Frame):
    def __init__(self, displayindex):
        geometry = wx.Display(displayindex).GetGeometry()
        style = wx.NO_BORDER | wx.STAY_ON_TOP | wx.FRAME_TOOL_WINDOW
        super(NumberFrame, self).__init__(None, wx.ID_ANY, title, style = style)
        self.SetBackgroundColour(wx.Colour(255, 255, 255))
        box = wx.BoxSizer(wx.VERTICAL)
        font = wx.Font(numberFontSize, wx.DEFAULT, wx.NORMAL, wx.BOLD)
        text = wx.StaticText(self, wx.ID_ANY, str(displayindex))
        text.SetFont(font)
        box.Add(text, 0, wx.ALIGN_CENTER)
        self.SetSizerAndFit(box)
        size = self.GetSize()
        position = (geometry[0] + (geometry[2] / 2) - (size[0] / 2),
                    geometry[1] + (geometry[3] / 2) - (size[1] / 2))
        self.SetPosition(position)
        self.Show()

class DisplayChoice(wx.Frame):
    def __init__(self):
        #pdb.set_trace()
        style = wx.DEFAULT_FRAME_STYLE | wx.STAY_ON_TOP
        super(DisplayChoice, self).__init__(None, wx.ID_ANY, title, style = style)
        choices = ["-- Nothing --", "Presentation Screen", "Presentors Screen"]
        displays = wx.Display.GetCount()
        box = wx.BoxSizer(wx.VERTICAL)
        self.selections = []
        for d in range(displays):
            choice = wx.Choice(self, wx.ID_ANY, choices = choices)
            choice.SetSelection(0)
            self.selections.append(choice)

        for selection in self.selections:
            box.Add(selection, 0, wx.ALIGN_CENTER_HORIZONTAL)

        button = wx.Button(self, wx.ID_ANY, label = "OK")
        box.Add(button, 0, wx.ALIGN_CENTER_HORIZONTAL)

        self.SetSizerAndFit(box)
        self.Show()

class MyApp(wx.App):
    def OnInit(self):
        displays = wx.Display.GetCount()
        numberFrames = []
        for d in range(displays):
            print wx.Display(d).GetGeometry()
            numberFrames.append(NumberFrame(d))
        DisplayChoice()
            
        #Beamer = PresentationScreen()
        #Beamer.load("test.jpeg")
        #Beamer.display()
        #Presentor = PresentorsScreen()
        #Presentor.panel.Bind(wx.EVT_KEY_UP, self.OnKeyPress)
        return True

    def OnKeyPress(self, event):
        pdb.set_trace()
        event.Skip()
        key = event.GetKeyCode()
        if key == ord("f"):
            Beamer.Maximize()

    def LoadImage(self, filename):
        pass


def main():
    app = MyApp()
    app.MainLoop()

if __name__ == "__main__": main()

# vim:nnoremap <silent> <F5> :!./p      resentation: #
