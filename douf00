#!/usr/bin/env python

import os
import sys
import threading
import time
import wx
import config as cfg
from PresentorsScreen import PresentorsScreen
from PresentationScreen import PresentationScreen
from SlideList import SlideList
from NumberFrame import NumberFrame
from DisplayChoice import DisplayChoice
from ThumbnailList import ThumbnailList

def printUsage():
    print("Usage: " + sys.argv[0] + " [path]")

class TriggerClock(wx.PyEvent):
    def __init__(self):
        super(TriggerClock, self).__init__()
        self.SetEventType(cfg.EVT_CLOCK_ID)

class MyApp(wx.App):
    def OnInit(self):
        try:
            basedir = sys.argv[1]
        except IndexError:
            dirdialog = wx.DirDialog(None)
            if (dirdialog.ShowModal() == wx.ID_OK):
                basedir = dirdialog.GetPath()
            else:
                printUsage()
                sys.exit("No path specified")


        try:
            os.chdir(basedir)
        except OSError:
            sys.exit("No such file or directory")

        basedir = os.getcwd()

        cfg.pictureFiles = []
        files = os.listdir(basedir)
        for file in files:
            try:
                if (file[-4:].lower() == ".jpg") or (file[-5:].lower() == ".jpeg"):
                    cfg.pictureFiles.append(file)
            except IndexError:
                pass

        cfg.pictureFiles.sort()

        cfg.blankslide = ""
        if "blank.jpg" in cfg.pictureFiles:
            cfg.blankslide = "blank.jpg"
            cfg.pictureFiles.remove(cfg.blankslide)

        cfg.slidelist = SlideList()
        cfg.thumbnaillist = ThumbnailList()

        displayCount = wx.Display.GetCount()
        self.numberFrames = []
        for d in xrange(displayCount):
            self.numberFrames.append(NumberFrame(d))

        self.choice = DisplayChoice()
        self.choice.button.Bind(wx.EVT_BUTTON, self.Run)
        self.runTime = 120
        self.startTime = int(time.mktime(time.localtime()))
        self.remainingTime = self.runTime
        self.elapsedTime = 0
        return True

    def OnKeyPress(self, event):
        event.Skip()
        key = event.GetKeyCode()
        if (key == wx.WXK_RIGHT) or (key == wx.WXK_SPACE) or (key == wx.WXK_PAGEDOWN):
            self.NextSlide()
        elif (key == wx.WXK_LEFT) or (key == wx.WXK_DOWN) or (key == wx.WXK_PAGEUP):
            self.PrevSlide()
        elif (key == wx.WXK_ESCAPE) or (key == ord('q')) or (key == ord('Q')):
            for p in self.presentationScreens:
                p.Destroy()

            for p in self.presentorsScreens:
                p.Destroy()

            sys.exit(0)
        elif (key == ord('r')) or (key == ord('R')):
            self.startTime = int(time.time())
        elif (key == ord('p')) or (key == ord('P')):
            cfg.pause = not cfg.pause
        elif (key == ord('i')) or (key == ord('I')):
            cfg.index = not cfg.index
            for p in self.presentorsScreens:
                print type(p.hbox)
                print type(p.indexsizer)
                if cfg.index:
                    p.box.Replace(p.hbox, p.indexsizer)
                else:
                    p.box.Replace(p.indexsizer, p.hbox)
                p.Show()

    def Run(self, event):
        self.runTime = self.choice.spinctrl.GetValue() * 60
        self.slideindex = -1
        displayCount = wx.Display.GetCount()
        self.presentationScreens = []
        self.presentorsScreens = []
        for displayindex in xrange(displayCount):
            if self.choice.choices[self.choice.selections[displayindex].GetSelection()] == "Audience":
                self.presentationScreens.append(PresentationScreen(displayindex = displayindex))
            elif self.choice.choices[self.choice.selections[displayindex].GetSelection()] == "Presentor":
                self.presentorsScreens.append(PresentorsScreen(displayindex = displayindex))

        self.choice.Destroy()
        for numberFrame in self.numberFrames:
            numberFrame.Destroy()
        
        if (self.presentationScreens == []) and (self.presentorsScreens == []):
            sys.exit()

        for p in self.presentationScreens:
            p.load(self.slideindex)
            p.Show()
            p.panel.Bind(wx.EVT_KEY_UP, self.OnKeyPress)
            p.panel.SetFocus()

        for p in self.presentorsScreens:
            p.load(self.slideindex)
            p.Show()
            p.panel.Bind(wx.EVT_KEY_UP, self.OnKeyPress)
            p.panel.SetFocus()

        self.setClock("f00")
        t = self.Clock(self, self.presentorsScreens)
        t.setDaemon(True)
        t.start()
        self.Connect(-1, -1, cfg.EVT_CLOCK_ID, self.setClock)

    def setClock(self, event):
        t = time.localtime()
        now = int(time.time())
        is_running = 0
        if ((0 <= self.slideindex < len(cfg.pictureFiles)) and \
            (self.remainingTime > 0)) and (not cfg.pause):
            is_running = 1
        else:
            self.startTime = now - self.elapsedTime

        if is_running == 1:
            self.elapsedTime = now - self.startTime + 1
        else:
            self.elapsedTime = now - self.startTime

        self.remainingTime = self.runTime - self.elapsedTime
        for s in self.presentorsScreens:
            tstr = "%02d:%02d:%02d" % (t[3], t[4], t[5])
            s.clock.SetLabel(tstr)
            countUpStr = "%02d:%02d" % (self.elapsedTime / 60,
                                        self.elapsedTime % 60)
            countDownStr = "%02d:%02d" % (self.remainingTime / 60,
                                          self.remainingTime % 60)
            s.countUp.SetLabel(countUpStr)
            s.countDown.SetLabel(countDownStr)
            try:
                red = int(float(255) * self.elapsedTime / self.runTime)
                green = int(float(255) * self.remainingTime / self.runTime)
                color = wx.Colour(red, green, 0)
                s.panel.SetBackgroundColour(color)
                if self.remainingTime < 120:
                    color = wx.Colour(255, 0, 0)
                    s.countDown.SetForegroundColour(color)
            except:
                pass

    class Clock(threading.Thread):
        def __init__(self, mainApp, presentorsScreens):
            self.mainApp = mainApp 
            self.presentorsScreens = presentorsScreens
            super(MyApp.Clock, self).__init__()
        def run(self):
            while 1:
                wx.PostEvent(self.mainApp, TriggerClock())
                time.sleep(1)


    def NextSlide(self):
        if self.slideindex < len(cfg.pictureFiles):
            self.slideindex += 1

        for p in self.presentationScreens:
            p.load(self.slideindex)
            p.Show()

        for p in self.presentorsScreens:
            p.load(self.slideindex)
            p.Show()
         
    def PrevSlide(self):
        if self.slideindex != -1:
            self.slideindex -= 1

        for p in self.presentationScreens:
            p.load(self.slideindex)
            p.Show()

        for p in self.presentorsScreens:
            p.load(self.slideindex)
            p.Show()
         

def main():
    app = MyApp()
    app.MainLoop()

if __name__ == "__main__": main()

